@page "/product-detail/{productId:int}"


@using MenShopBlazor.Services.Product
@using MenShopBlazor.DTOs.Product.ViewModel
@using MenShopBlazor.Shared;
@using MenShopBlazor.Services.UploadImage;
@inject IProductService ProductService
@inject IUpImg ImageService
@inject IDialogService DialogService


<MudBreadcrumbs Items="_items"></MudBreadcrumbs>
<MudContainer Class="mt-5 px-8" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12">
            @if (showAlert)
            {
                <MudAlert Severity="@alertSeverity" Variant="Variant.Outlined" Dense="true" Elevation="0" Class="mb-3">
                    @alertMessage
                </MudAlert>
            }
            <MudDataGrid T="ProductDetailViewModel"
                         Items="@productDetails"
                         Filterable="true"
                         Dense="true"
                         FilterMode="DataGridFilterMode.ColumnFilterRow">

                <Columns>
                    <PropertyColumn Property="x => x.DetailId" Title="MÃ CHI TIẾT" />
                    <PropertyColumn Property="x => x.SizeName" Title="SIZE" />
                    <PropertyColumn Property="x => x.ColorName" Title="MÀU" />
                    <PropertyColumn Property="x => x.FabricName" Title="CHẤT LIỆU" />

                    <TemplateColumn Title="LỊCH SỬ GIÁ" Class="w-25">
                        <CellTemplate>
                            <MudTable Dense="true" Hover="false" Bordered="false" Elevation="0"
                                      RowsPerPage="3" HidePaging="true" Items="context.Item.HistoryPrices">
                                <HeaderContent>
                                    <MudTh>Ngày</MudTh>
                                    <MudTh>Giá bán</MudTh>
                                </HeaderContent>
                                <RowTemplate Context="item">
                                    <MudTd>@item.UpdatedDate.ToString("dd/MM/yyyy")</MudTd>
                                    <MudTd>@item.SellPrice.ToString("N0") đ</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </CellTemplate>
                    </TemplateColumn>


                    <TemplateColumn Title="ẢNH">
                        <CellTemplate>
                            @{
                                var detailId = context.Item.DetailId;
                            }

                            @if (context.Item.Images?.Any() == true)
                            {
                                <img src="@context.Item.Images.First().FullPath"
                                     @onclick="() => OpenImageModal(detailId, context.Item.Images)"
                                     class="img-hover"
                                     style="width: 100px; height: 80px; object-fit: cover; cursor: pointer; border-radius: 4px;" />
                            }
                            else
                            {
                                <img src="imgs/noImg.jpeg"
                                     @onclick="() => OpenImageModal(detailId, new List<ImageProductViewModel>())"
                                     class="img-hover"
                                     style="width: 100px; height: 80px; object-fit: cover; cursor: pointer; border-radius: 4px;" />
                            }
                        </CellTemplate>
                    </TemplateColumn>





                    <TemplateColumn Title="TÙY CHỈNH" TextAlign="DataGridColumnAlign.Right">
                        <CellTemplate>
                            <MudStack Row>
                                <MudButton StartIcon="@Icons.Material.Outlined.Edit"
                                           Size="Size.Small"
                                           Color="Color.Primary"
                                           OnClick="@(() => OpenEditDialog(context.Item))">
                                    Sửa
                                </MudButton>

                                <MudButton StartIcon="@Icons.Material.Outlined.Delete"
                                           Size="Size.Small"
                                           Color="Color.Error"
                                           Class="ml-2"
                                           OnClick="@(() => DeleteDetailProduct(context.Item.DetailId))">
                                    Xoá
                                </MudButton>

                            </MudStack>
                        </CellTemplate>
                    </TemplateColumn>

                </Columns>

                <PagerContent>
                    <MudDataGridPager T="ProductDetailViewModel" />
                </PagerContent>
            </MudDataGrid>

            <MudButton Color="Color.Primary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.Add"
                       Class="mt-3" OnClick="@(() => OpenCreateDialog(ProductId))">
                Thêm chi tiết
            </MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    private List<BreadcrumbItem> _items = new();
    [Parameter] public int ProductId { get; set; }
    private IEnumerable<ProductDetailViewModel> productDetails = new List<ProductDetailViewModel>();
    private string productName = "Đang tải...";
    private string? alertMessage;
    private Severity alertSeverity;
    private bool showAlert = false;
    private Transition transition = Transition.Slide;

    protected override async Task OnInitializedAsync()
    {

        var product = await ProductService.GetProductByIdAsync(ProductId);
        productName = product?.ProductName ?? $"ID: {ProductId}";
        _items = new()
        {
            new BreadcrumbItem("Trang chủ", href: "/", icon: Icons.Material.Filled.Home),
            new BreadcrumbItem("Sản phẩm", href: "/list-product", icon: Icons.Material.Filled.List),
            new($"Chi tiết: {productName}", href: null, disabled: true, icon: Icons.Material.Filled.Info)
        };
        await LoadProductDetailsAsync();
    
    }

    private async Task LoadProductDetailsAsync()
    {
        productDetails = await ProductService.GetProductDetailsAsync(ProductId);
    }
    private void OpenImageModal(int detailId, IEnumerable<ImageProductViewModel> images)
    {
        var parameters = new DialogParameters
    {
        { "DetailId", detailId },
        { "Images", images },
        { "OnImagesSaved", EventCallback.Factory.Create(this, async () =>
            {
                await LoadProductDetailsAsync();
                StateHasChanged();
            })
        }
    };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.Medium,
                FullWidth = true,
                CloseButton = true
            };

        DialogService.Show<ImageCarouselDialog>("ẢNH CHI TIẾT SẢN PHẨM", parameters, options);
    }
    private async Task ShowAlertAsync(string message, Severity severity, int duration = 5000)
    {
        alertMessage = message;
        alertSeverity = severity;
        showAlert = true;
        StateHasChanged();
        await Task.Delay(duration);
        showAlert = false;
        StateHasChanged();
    }
    private async Task DeleteDetailProduct(int id)
    {
        var parameters = new DialogParameters
        {
            { "ContentText", $"Bạn có chắc muốn xoá chi tiết sản phẩm có ID = {id} không?" },
            { "ButtonText", "Xoá" },
            { "Color", Color.Error }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        var dialog = DialogService.Show<ConfirmDeleteDialog>("Xác nhận xoá", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var response = await ProductService.DeleteProductDetailAsync(id);
            await LoadProductDetailsAsync();

            if (response.Success)
                await ShowAlertAsync(response.Message, Severity.Success);
            else
                await ShowAlertAsync(response.Message, Severity.Error);
        }
    }

    private async Task OpenEditDialog(ProductDetailViewModel productDetail)
    {
        var parameters = new DialogParameters { ["Detail"] = productDetail };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };

        var dialog = DialogService.Show<EditProductDetailDiaLog>("CHỈNH SỬA CHI TIẾT SẢN PHẨM", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProductDetailsAsync();
        }
    }
    private async Task OpenCreateDialog(int productId)
    {
        var parameters = new DialogParameters
        {
            { "ProductId", productId }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = DialogService.Show<CreateProductDetailDialog>("TẠO CHI TIẾT SẢN PHẨM", parameters,options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await LoadProductDetailsAsync();
        }
    }
}
